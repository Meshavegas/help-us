basePath: /api/v1
definitions:
  controllers.AddressResponse:
    properties:
      city:
        type: string
      country:
        type: string
      courses:
        items:
          $ref: '#/definitions/models.Course'
        type: array
      created_at:
        type: string
      id:
        type: integer
      latitude:
        type: number
      longitude:
        type: number
      postal_code:
        type: string
      street:
        type: string
      updated_at:
        type: string
      user:
        allOf:
        - $ref: '#/definitions/models.User'
        description: Relationships
      user_id:
        description: Foreign Key
        type: integer
    type: object
  controllers.AuthResponse:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/models.User'
    type: object
  controllers.CourseResponse:
    properties:
      address:
        $ref: '#/definitions/models.Address'
      address_id:
        type: integer
      created_at:
        type: string
      duration:
        description: Duration in minutes
        type: integer
      enseignant:
        $ref: '#/definitions/models.Enseignant'
      enseignant_id:
        type: integer
      famille:
        allOf:
        - $ref: '#/definitions/models.Famille'
        description: Relationships
      famille_id:
        description: Foreign Keys
        type: integer
      id:
        type: integer
      location:
        type: string
      mission:
        $ref: '#/definitions/models.Mission'
      mission_id:
        type: integer
      payments:
        items:
          $ref: '#/definitions/models.Payment'
        type: array
      scheduled_time:
        type: string
      status:
        $ref: '#/definitions/models.CourseStatus'
      updated_at:
        type: string
    type: object
  controllers.EnseignantResponse:
    properties:
      addresses:
        description: Relationships
        items:
          $ref: '#/definitions/models.Address'
        type: array
      courses:
        items:
          $ref: '#/definitions/models.Course'
        type: array
      created_at:
        type: string
      email:
        type: string
      enseignant:
        $ref: '#/definitions/models.Enseignant'
      id:
        type: integer
      is_active:
        type: boolean
      missions:
        items:
          $ref: '#/definitions/models.Mission'
        type: array
      options:
        items:
          $ref: '#/definitions/models.Option'
        type: array
      payments:
        items:
          $ref: '#/definitions/models.Payment'
        type: array
      phone_number:
        type: string
      reports:
        items:
          $ref: '#/definitions/models.Report'
        type: array
      resources:
        items:
          $ref: '#/definitions/models.Resource'
        type: array
      role:
        $ref: '#/definitions/models.UserRole'
      updated_at:
        type: string
      username:
        type: string
    type: object
  controllers.FamilleResponse:
    properties:
      addresses:
        description: Relationships
        items:
          $ref: '#/definitions/models.Address'
        type: array
      courses:
        items:
          $ref: '#/definitions/models.Course'
        type: array
      created_at:
        type: string
      email:
        type: string
      famille:
        $ref: '#/definitions/models.Famille'
      id:
        type: integer
      is_active:
        type: boolean
      missions:
        items:
          $ref: '#/definitions/models.Mission'
        type: array
      options:
        items:
          $ref: '#/definitions/models.Option'
        type: array
      payments:
        items:
          $ref: '#/definitions/models.Payment'
        type: array
      phone_number:
        type: string
      resources:
        items:
          $ref: '#/definitions/models.Resource'
        type: array
      role:
        $ref: '#/definitions/models.UserRole'
      updated_at:
        type: string
      username:
        type: string
    type: object
  controllers.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  controllers.MissionResponse:
    properties:
      courses:
        items:
          $ref: '#/definitions/models.Course'
        type: array
      created_at:
        type: string
      description:
        type: string
      end_date:
        type: string
      enseignant:
        $ref: '#/definitions/models.Enseignant'
      enseignant_id:
        type: integer
      famille:
        allOf:
        - $ref: '#/definitions/models.Famille'
        description: Relationships
      famille_id:
        description: Foreign Keys
        type: integer
      id:
        type: integer
      payments:
        items:
          $ref: '#/definitions/models.Payment'
        type: array
      reports:
        items:
          $ref: '#/definitions/models.Report'
        type: array
      start_date:
        type: string
      status:
        $ref: '#/definitions/models.MissionStatus'
      updated_at:
        type: string
    type: object
  controllers.OfferResponse:
    properties:
      created_at:
        type: string
      created_by:
        allOf:
        - $ref: '#/definitions/models.Administrator'
        description: Relationships
      created_by_id:
        description: Foreign Keys
        type: integer
      description:
        type: string
      enseignants:
        items:
          $ref: '#/definitions/models.Enseignant'
        type: array
      hourly_rate:
        type: number
      id:
        type: integer
      level:
        type: string
      options:
        items:
          $ref: '#/definitions/models.Option'
        type: array
      publication_date:
        type: string
      requirements:
        type: string
      status:
        $ref: '#/definitions/models.OfferStatus'
      subject:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  controllers.OptionResponse:
    properties:
      created_at:
        type: string
      creation_date:
        type: string
      description:
        type: string
      enseignant:
        allOf:
        - $ref: '#/definitions/models.Enseignant'
        description: Relationships
      enseignant_id:
        description: Foreign Keys
        type: integer
      expiration_date:
        type: string
      famille:
        $ref: '#/definitions/models.Famille'
      famille_id:
        type: integer
      id:
        type: integer
      offer:
        $ref: '#/definitions/models.Offer'
      offer_id:
        type: integer
      status:
        $ref: '#/definitions/models.OptionStatus'
      updated_at:
        type: string
    type: object
  controllers.RegisterRequest:
    properties:
      email:
        type: string
      family_name:
        description: Pour les familles
        type: string
      password:
        minLength: 6
        type: string
      phone_number:
        type: string
      qualifications:
        description: Pour les enseignants
        type: string
      role:
        $ref: '#/definitions/models.UserRole'
      specialization:
        description: Pour les enseignants
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - password
    - role
    - username
    type: object
  controllers.UserResponse:
    properties:
      addresses:
        description: Relationships
        items:
          $ref: '#/definitions/models.Address'
        type: array
      administrator:
        $ref: '#/definitions/models.Administrator'
      created_at:
        type: string
      email:
        type: string
      enseignant:
        $ref: '#/definitions/models.Enseignant'
      famille:
        $ref: '#/definitions/models.Famille'
      id:
        type: integer
      is_active:
        type: boolean
      payments:
        items:
          $ref: '#/definitions/models.Payment'
        type: array
      phone_number:
        type: string
      resources:
        items:
          $ref: '#/definitions/models.Resource'
        type: array
      role:
        $ref: '#/definitions/models.UserRole'
      updated_at:
        type: string
      username:
        type: string
    type: object
  models.Address:
    properties:
      city:
        type: string
      country:
        type: string
      courses:
        items:
          $ref: '#/definitions/models.Course'
        type: array
      created_at:
        type: string
      id:
        type: integer
      latitude:
        type: number
      longitude:
        type: number
      postal_code:
        type: string
      street:
        type: string
      updated_at:
        type: string
      user:
        allOf:
        - $ref: '#/definitions/models.User'
        description: Relationships
      user_id:
        description: Foreign Key
        type: integer
    type: object
  models.AddressCreateRequest:
    properties:
      city:
        type: string
      country:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      postal_code:
        type: string
      street:
        type: string
    required:
    - city
    - country
    - postal_code
    - street
    type: object
  models.AddressUpdateRequest:
    properties:
      city:
        type: string
      country:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      postal_code:
        type: string
      street:
        type: string
    type: object
  models.Administrator:
    properties:
      created_offers:
        items:
          $ref: '#/definitions/models.Offer'
        type: array
      managed_resources:
        items:
          $ref: '#/definitions/models.Resource'
        type: array
      user:
        allOf:
        - $ref: '#/definitions/models.User'
        description: Relationships
      user_id:
        type: integer
      validated_reports:
        items:
          $ref: '#/definitions/models.Report'
        type: array
    type: object
  models.Course:
    properties:
      address:
        $ref: '#/definitions/models.Address'
      address_id:
        type: integer
      created_at:
        type: string
      duration:
        description: Duration in minutes
        type: integer
      enseignant:
        $ref: '#/definitions/models.Enseignant'
      enseignant_id:
        type: integer
      famille:
        allOf:
        - $ref: '#/definitions/models.Famille'
        description: Relationships
      famille_id:
        description: Foreign Keys
        type: integer
      id:
        type: integer
      location:
        type: string
      mission:
        $ref: '#/definitions/models.Mission'
      mission_id:
        type: integer
      payments:
        items:
          $ref: '#/definitions/models.Payment'
        type: array
      scheduled_time:
        type: string
      status:
        $ref: '#/definitions/models.CourseStatus'
      updated_at:
        type: string
    type: object
  models.CourseCreateRequest:
    properties:
      address_id:
        type: integer
      duration:
        description: 30 min to 8 hours
        maximum: 480
        minimum: 30
        type: integer
      enseignant_id:
        type: integer
      location:
        type: string
      scheduled_time:
        type: string
    required:
    - address_id
    - duration
    - enseignant_id
    - location
    - scheduled_time
    type: object
  models.CourseScheduleRequest:
    properties:
      address_id:
        type: integer
      duration:
        maximum: 480
        minimum: 30
        type: integer
      location:
        type: string
      scheduled_time:
        type: string
    required:
    - address_id
    - duration
    - location
    - scheduled_time
    type: object
  models.CourseStatus:
    enum:
    - scheduled
    - completed
    - cancelled
    - in_progress
    type: string
    x-enum-varnames:
    - CourseStatusScheduled
    - CourseStatusCompleted
    - CourseStatusCancelled
    - CourseStatusInProgress
  models.CourseUpdateRequest:
    properties:
      duration:
        type: integer
      location:
        type: string
      scheduled_time:
        type: string
      status:
        $ref: '#/definitions/models.CourseStatus'
    type: object
  models.Enseignant:
    properties:
      courses:
        items:
          $ref: '#/definitions/models.Course'
        type: array
      missions:
        items:
          $ref: '#/definitions/models.Mission'
        type: array
      offers:
        items:
          $ref: '#/definitions/models.Offer'
        type: array
      options:
        items:
          $ref: '#/definitions/models.Option'
        type: array
      qualifications:
        type: string
      reports:
        items:
          $ref: '#/definitions/models.Report'
        type: array
      specialization:
        type: string
      user:
        allOf:
        - $ref: '#/definitions/models.User'
        description: Relationships
      user_id:
        type: integer
    type: object
  models.Famille:
    properties:
      courses:
        items:
          $ref: '#/definitions/models.Course'
        type: array
      family_name:
        type: string
      missions:
        items:
          $ref: '#/definitions/models.Mission'
        type: array
      options:
        items:
          $ref: '#/definitions/models.Option'
        type: array
      user:
        allOf:
        - $ref: '#/definitions/models.User'
        description: Relationships
      user_id:
        type: integer
    type: object
  models.Mission:
    properties:
      courses:
        items:
          $ref: '#/definitions/models.Course'
        type: array
      created_at:
        type: string
      description:
        type: string
      end_date:
        type: string
      enseignant:
        $ref: '#/definitions/models.Enseignant'
      enseignant_id:
        type: integer
      famille:
        allOf:
        - $ref: '#/definitions/models.Famille'
        description: Relationships
      famille_id:
        description: Foreign Keys
        type: integer
      id:
        type: integer
      reports:
        items:
          $ref: '#/definitions/models.Report'
        type: array
      start_date:
        type: string
      status:
        $ref: '#/definitions/models.MissionStatus'
      updated_at:
        type: string
    type: object
  models.MissionCreateRequest:
    properties:
      description:
        type: string
      end_date:
        type: string
      enseignant_id:
        type: integer
      start_date:
        type: string
    required:
    - enseignant_id
    - start_date
    type: object
  models.MissionStatus:
    enum:
    - active
    - completed
    - stopped
    - paused
    type: string
    x-enum-varnames:
    - MissionStatusActive
    - MissionStatusCompleted
    - MissionStatusStopped
    - MissionStatusPaused
  models.MissionUpdateRequest:
    properties:
      description:
        type: string
      end_date:
        type: string
      status:
        $ref: '#/definitions/models.MissionStatus'
    type: object
  models.Offer:
    properties:
      created_at:
        type: string
      created_by:
        allOf:
        - $ref: '#/definitions/models.Administrator'
        description: Relationships
      created_by_id:
        description: Foreign Keys
        type: integer
      description:
        type: string
      enseignants:
        items:
          $ref: '#/definitions/models.Enseignant'
        type: array
      hourly_rate:
        type: number
      id:
        type: integer
      level:
        type: string
      options:
        items:
          $ref: '#/definitions/models.Option'
        type: array
      publication_date:
        type: string
      requirements:
        type: string
      status:
        $ref: '#/definitions/models.OfferStatus'
      subject:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  models.OfferCreateRequest:
    properties:
      description:
        type: string
      hourly_rate:
        minimum: 0
        type: number
      level:
        type: string
      requirements:
        type: string
      subject:
        type: string
      title:
        type: string
    required:
    - description
    - hourly_rate
    - level
    - subject
    - title
    type: object
  models.OfferStatus:
    enum:
    - open
    - closed
    - filled
    - draft
    type: string
    x-enum-varnames:
    - OfferStatusOpen
    - OfferStatusClosed
    - OfferStatusFilled
    - OfferStatusDraft
  models.OfferUpdateRequest:
    properties:
      description:
        type: string
      hourly_rate:
        type: number
      level:
        type: string
      requirements:
        type: string
      status:
        $ref: '#/definitions/models.OfferStatus'
      subject:
        type: string
      title:
        type: string
    type: object
  models.Option:
    properties:
      created_at:
        type: string
      creation_date:
        type: string
      description:
        type: string
      enseignant:
        allOf:
        - $ref: '#/definitions/models.Enseignant'
        description: Relationships
      enseignant_id:
        description: Foreign Keys
        type: integer
      expiration_date:
        type: string
      famille:
        $ref: '#/definitions/models.Famille'
      famille_id:
        type: integer
      id:
        type: integer
      offer:
        $ref: '#/definitions/models.Offer'
      offer_id:
        type: integer
      status:
        $ref: '#/definitions/models.OptionStatus'
      updated_at:
        type: string
    type: object
  models.OptionCreateRequest:
    properties:
      description:
        type: string
      enseignant_id:
        type: integer
      expiration_date:
        type: string
      famille_id:
        type: integer
      offer_id:
        type: integer
    required:
    - enseignant_id
    - famille_id
    type: object
  models.OptionStatus:
    enum:
    - active
    - expired
    - accepted
    - cancelled
    type: string
    x-enum-varnames:
    - OptionStatusActive
    - OptionStatusExpired
    - OptionStatusAccepted
    - OptionStatusCancelled
  models.OptionUpdateRequest:
    properties:
      description:
        type: string
      expiration_date:
        type: string
      status:
        $ref: '#/definitions/models.OptionStatus'
    type: object
  models.Payment:
    properties:
      amount:
        type: number
      course:
        $ref: '#/definitions/models.Course'
      course_id:
        type: integer
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      payment_date:
        type: string
      status:
        $ref: '#/definitions/models.PaymentStatus'
      type:
        $ref: '#/definitions/models.PaymentType'
      updated_at:
        type: string
      user:
        allOf:
        - $ref: '#/definitions/models.User'
        description: Relationships
      user_id:
        description: Foreign Keys
        type: integer
    type: object
  models.PaymentStatus:
    enum:
    - pending
    - completed
    - failed
    - refunded
    type: string
    x-enum-varnames:
    - PaymentStatusPending
    - PaymentStatusCompleted
    - PaymentStatusFailed
    - PaymentStatusRefunded
  models.PaymentType:
    enum:
    - course
    - mission
    - advance
    - refund
    type: string
    x-enum-varnames:
    - PaymentTypeCourse
    - PaymentTypeMission
    - PaymentTypeAdvance
    - PaymentTypeRefund
  models.Report:
    properties:
      comments:
        type: string
      content:
        type: string
      created_at:
        type: string
      enseignant:
        allOf:
        - $ref: '#/definitions/models.Enseignant'
        description: Relationships
      enseignant_id:
        description: Foreign Keys
        type: integer
      id:
        type: integer
      mission:
        $ref: '#/definitions/models.Mission'
      mission_id:
        type: integer
      status:
        $ref: '#/definitions/models.ReportStatus'
      submission_date:
        type: string
      updated_at:
        type: string
      validated_by:
        $ref: '#/definitions/models.Administrator'
      validated_by_id:
        type: integer
      validation_date:
        type: string
    type: object
  models.ReportStatus:
    enum:
    - submitted
    - validated
    - rejected
    - pending
    type: string
    x-enum-varnames:
    - ReportStatusSubmitted
    - ReportStatusValidated
    - ReportStatusRejected
    - ReportStatusPending
  models.Resource:
    properties:
      created_at:
        type: string
      description:
        type: string
      file_size:
        description: Size in bytes
        type: integer
      id:
        type: integer
      is_public:
        type: boolean
      managed_by:
        allOf:
        - $ref: '#/definitions/models.Administrator'
        description: Relationships
      managed_by_id:
        description: Foreign Keys
        type: integer
      mime_type:
        type: string
      title:
        type: string
      type:
        $ref: '#/definitions/models.ResourceType'
      updated_at:
        type: string
      upload_date:
        type: string
      url:
        type: string
      users:
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
  models.ResourceType:
    enum:
    - document
    - video
    - audio
    - image
    - link
    type: string
    x-enum-varnames:
    - ResourceTypeDocument
    - ResourceTypeVideo
    - ResourceTypeAudio
    - ResourceTypeImage
    - ResourceTypeLink
  models.User:
    properties:
      addresses:
        description: Relationships
        items:
          $ref: '#/definitions/models.Address'
        type: array
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      payments:
        items:
          $ref: '#/definitions/models.Payment'
        type: array
      phone_number:
        type: string
      resources:
        items:
          $ref: '#/definitions/models.Resource'
        type: array
      role:
        $ref: '#/definitions/models.UserRole'
      updated_at:
        type: string
      username:
        type: string
    type: object
  models.UserCreateRequest:
    properties:
      email:
        type: string
      family_name:
        description: For Famille
        type: string
      password:
        minLength: 6
        type: string
      phone_number:
        type: string
      qualifications:
        description: For Enseignant
        type: string
      role:
        $ref: '#/definitions/models.UserRole'
      specialization:
        description: For Enseignant
        type: string
      username:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - email
    - password
    - role
    - username
    type: object
  models.UserRole:
    enum:
    - famille
    - enseignant
    - administrator
    type: string
    x-enum-varnames:
    - RoleFamille
    - RoleEnseignant
    - RoleAdministrator
  models.UserUpdateRequest:
    properties:
      email:
        type: string
      family_name:
        type: string
      phone_number:
        type: string
      qualifications:
        type: string
      specialization:
        type: string
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: Support API
    url: http://www.swagger.io/support
  description: API REST complète pour la gestion d'une plateforme éducative avec familles,
    enseignants et administrateurs
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: API REST Go - Plateforme Éducative
  version: "1.0"
paths:
  /addresses:
    get:
      consumes:
      - application/json
      description: Récupère la liste de toutes les adresses (admin seulement)
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Address'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Liste toutes les adresses
      tags:
      - addresses
    post:
      consumes:
      - application/json
      description: Crée une nouvelle adresse
      parameters:
      - description: Données de l'adresse
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.AddressCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controllers.AddressResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Création d'une adresse
      tags:
      - addresses
  /addresses/{id}:
    delete:
      consumes:
      - application/json
      description: Supprime une adresse existante
      parameters:
      - description: ID de l'adresse
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Suppression d'une adresse
      tags:
      - addresses
    get:
      consumes:
      - application/json
      description: Récupère les détails d'une adresse spécifique
      parameters:
      - description: ID de l'adresse
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.AddressResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Détails d'une adresse
      tags:
      - addresses
    put:
      consumes:
      - application/json
      description: Met à jour les informations d'une adresse existante
      parameters:
      - description: ID de l'adresse
        in: path
        name: id
        required: true
        type: integer
      - description: Données de mise à jour
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.AddressUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.AddressResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Mise à jour d'une adresse
      tags:
      - addresses
  /addresses/geocode:
    get:
      consumes:
      - application/json
      description: Convertit une adresse en coordonnées géographiques (latitude/longitude)
      parameters:
      - description: Rue
        in: query
        name: street
        required: true
        type: string
      - description: Ville
        in: query
        name: city
        required: true
        type: string
      - description: Code postal
        in: query
        name: postal_code
        required: true
        type: string
      - description: Pays
        in: query
        name: country
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Géocodage d'une adresse
      tags:
      - addresses
  /addresses/route:
    get:
      consumes:
      - application/json
      description: Calcule l'itinéraire entre deux adresses
      parameters:
      - description: ID de l'adresse de départ
        in: query
        name: origin_id
        required: true
        type: integer
      - description: ID de l'adresse d'arrivée
        in: query
        name: destination_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Calcul d'itinéraire
      tags:
      - addresses
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authentifier un utilisateur et retourner un token JWT
      parameters:
      - description: Identifiants de connexion
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Connexion réussie
          schema:
            $ref: '#/definitions/controllers.AuthResponse'
        "400":
          description: Erreur de validation
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Identifiants incorrects
          schema:
            additionalProperties: true
            type: object
      summary: Connexion d'un utilisateur
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Déconnecter l'utilisateur (invalide le token côté client)
      produces:
      - application/json
      responses:
        "200":
          description: Déconnexion réussie
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Déconnexion
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Générer un nouveau token JWT à partir d'un token existant
      produces:
      - application/json
      responses:
        "200":
          description: Nouveau token généré
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Token invalide
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Rafraîchir le token JWT
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Créer un nouveau compte utilisateur
      parameters:
      - description: Données d'inscription
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controllers.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Utilisateur créé avec succès
          schema:
            $ref: '#/definitions/controllers.AuthResponse'
        "400":
          description: Erreur de validation
          schema:
            additionalProperties: true
            type: object
        "409":
          description: Utilisateur déjà existant
          schema:
            additionalProperties: true
            type: object
      summary: Inscription d'un utilisateur
      tags:
      - auth
  /courses:
    get:
      consumes:
      - application/json
      description: Récupère la liste des cours avec possibilité de filtrage par statut,
        enseignant, famille ou mission
      parameters:
      - description: Statut du cours
        in: query
        name: status
        type: string
      - description: ID de l'enseignant
        in: query
        name: enseignant_id
        type: integer
      - description: ID de la famille
        in: query
        name: famille_id
        type: integer
      - description: ID de la mission
        in: query
        name: mission_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/controllers.CourseResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Liste tous les cours
      tags:
      - courses
    post:
      consumes:
      - application/json
      description: Crée un nouveau cours
      parameters:
      - description: Données du cours
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CourseCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controllers.CourseResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Création d'un cours
      tags:
      - courses
  /courses/{id}:
    delete:
      consumes:
      - application/json
      description: Supprime un cours existant
      parameters:
      - description: ID du cours
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Suppression d'un cours
      tags:
      - courses
    get:
      consumes:
      - application/json
      description: Récupère les détails d'un cours spécifique
      parameters:
      - description: ID du cours
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.CourseResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Détails d'un cours
      tags:
      - courses
    put:
      consumes:
      - application/json
      description: Met à jour les informations d'un cours existant
      parameters:
      - description: ID du cours
        in: path
        name: id
        required: true
        type: integer
      - description: Données de mise à jour
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CourseUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.CourseResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Mise à jour d'un cours
      tags:
      - courses
  /courses/{id}/cancel:
    put:
      consumes:
      - application/json
      description: Annule un cours planifié
      parameters:
      - description: ID du cours
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.CourseResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Annulation d'un cours
      tags:
      - courses
  /courses/{id}/complete:
    put:
      consumes:
      - application/json
      description: Marque un cours comme terminé
      parameters:
      - description: ID du cours
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.CourseResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Validation d'un cours
      tags:
      - courses
  /courses/{id}/declare:
    post:
      consumes:
      - application/json
      description: Déclare les heures effectuées pour un cours
      parameters:
      - description: ID du cours
        in: path
        name: id
        required: true
        type: integer
      - description: Heures effectuées
        in: body
        name: request
        required: true
        schema:
          additionalProperties:
            type: number
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.CourseResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Déclaration des heures d'un cours
      tags:
      - courses
  /courses/{id}/payments:
    get:
      consumes:
      - application/json
      description: Récupère tous les paiements associés à un cours
      parameters:
      - description: ID du cours
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Payment'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Liste des paiements d'un cours
      tags:
      - courses
  /courses/{id}/schedule:
    put:
      consumes:
      - application/json
      description: Planifie un cours à une date spécifique
      parameters:
      - description: ID du cours
        in: path
        name: id
        required: true
        type: integer
      - description: Données de planification
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CourseScheduleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.CourseResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Planification d'un cours
      tags:
      - courses
  /enseignants:
    get:
      consumes:
      - application/json
      description: Récupère la liste de tous les enseignants
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/controllers.EnseignantResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Liste tous les enseignants
      tags:
      - enseignants
    post:
      consumes:
      - application/json
      description: Crée un nouveau compte enseignant (admin seulement)
      parameters:
      - description: Données de l'enseignant
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UserCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controllers.EnseignantResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Création d'un enseignant
      tags:
      - enseignants
  /enseignants/{id}:
    delete:
      consumes:
      - application/json
      description: Supprime un compte enseignant (admin seulement)
      parameters:
      - description: ID de l'enseignant
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Suppression d'un enseignant
      tags:
      - enseignants
    get:
      consumes:
      - application/json
      description: Récupère les détails d'un enseignant spécifique
      parameters:
      - description: ID de l'enseignant
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.EnseignantResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Détails d'un enseignant
      tags:
      - enseignants
    put:
      consumes:
      - application/json
      description: Met à jour les informations d'un enseignant (admin ou propriétaire)
      parameters:
      - description: ID de l'enseignant
        in: path
        name: id
        required: true
        type: integer
      - description: Données de mise à jour
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UserUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Mise à jour d'un enseignant
      tags:
      - enseignants
  /enseignants/{id}/courses:
    get:
      consumes:
      - application/json
      description: Récupère la liste des cours associés à un enseignant
      parameters:
      - description: ID de l'enseignant
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Course'
            type: array
      security:
      - BearerAuth: []
      summary: Liste des cours d'un enseignant
      tags:
      - enseignants
  /enseignants/{id}/missions:
    get:
      consumes:
      - application/json
      description: Récupère la liste des missions associées à un enseignant
      parameters:
      - description: ID de l'enseignant
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Mission'
            type: array
      security:
      - BearerAuth: []
      summary: Liste des missions d'un enseignant
      tags:
      - enseignants
  /enseignants/{id}/options:
    get:
      consumes:
      - application/json
      description: Récupère la liste des options associées à un enseignant
      parameters:
      - description: ID de l'enseignant
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Option'
            type: array
      security:
      - BearerAuth: []
      summary: Liste des options d'un enseignant
      tags:
      - enseignants
  /enseignants/{id}/payments:
    get:
      consumes:
      - application/json
      description: Récupère la liste des paiements associés à un enseignant
      parameters:
      - description: ID de l'enseignant
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Payment'
            type: array
      security:
      - BearerAuth: []
      summary: Liste des paiements d'un enseignant
      tags:
      - enseignants
  /enseignants/{id}/reports:
    get:
      consumes:
      - application/json
      description: Récupère la liste des rapports soumis par un enseignant
      parameters:
      - description: ID de l'enseignant
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Report'
            type: array
      security:
      - BearerAuth: []
      summary: Liste des rapports d'un enseignant
      tags:
      - enseignants
  /enseignants/{id}/students:
    get:
      consumes:
      - application/json
      description: Récupère la liste des élèves associés à un enseignant
      parameters:
      - description: ID de l'enseignant
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      security:
      - BearerAuth: []
      summary: Liste des élèves d'un enseignant
      tags:
      - enseignants
  /enseignants/nearby:
    get:
      consumes:
      - application/json
      description: Récupère la liste des enseignants proches d'une localisation donnée
      parameters:
      - description: Latitude
        in: query
        name: lat
        required: true
        type: number
      - description: Longitude
        in: query
        name: lng
        required: true
        type: number
      - description: Rayon de recherche en km
        in: query
        name: radius
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/controllers.EnseignantResponse'
            type: array
      security:
      - BearerAuth: []
      summary: Liste des enseignants à proximité
      tags:
      - enseignants
  /familles:
    get:
      consumes:
      - application/json
      description: Récupère la liste de toutes les familles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/controllers.FamilleResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Liste toutes les familles
      tags:
      - familles
  /familles/{id}:
    delete:
      consumes:
      - application/json
      description: Supprime un compte famille (admin seulement)
      parameters:
      - description: ID de la famille
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Suppression d'une famille
      tags:
      - familles
    get:
      consumes:
      - application/json
      description: Récupère les détails d'une famille spécifique
      parameters:
      - description: ID de la famille
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.FamilleResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Détails d'une famille
      tags:
      - familles
    put:
      consumes:
      - application/json
      description: Met à jour les informations d'une famille (admin ou propriétaire)
      parameters:
      - description: ID de la famille
        in: path
        name: id
        required: true
        type: integer
      - description: Données de mise à jour
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UserUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Forbidden
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Mise à jour d'une famille
      tags:
      - familles
  /familles/{id}/courses:
    get:
      consumes:
      - application/json
      description: Récupère la liste des cours associés à une famille
      parameters:
      - description: ID de la famille
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Course'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Liste des cours d'une famille
      tags:
      - familles
  /familles/{id}/missions:
    get:
      consumes:
      - application/json
      description: Récupère la liste des missions associées à une famille
      parameters:
      - description: ID de la famille
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Mission'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Liste des missions d'une famille
      tags:
      - familles
  /familles/{id}/options:
    get:
      consumes:
      - application/json
      description: Récupère la liste des options associées à une famille
      parameters:
      - description: ID de la famille
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Option'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Liste des options d'une famille
      tags:
      - familles
  /familles/{id}/payments:
    get:
      consumes:
      - application/json
      description: Récupère la liste des paiements associés à une famille
      parameters:
      - description: ID de la famille
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Payment'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Liste des paiements d'une famille
      tags:
      - familles
  /familles/{id}/reviews:
    post:
      consumes:
      - application/json
      description: Ajoute un avis sur une famille (non implémenté)
      parameters:
      - description: ID de la famille
        in: path
        name: id
        required: true
        type: integer
      - description: Données de l'avis
        in: body
        name: review
        required: true
        schema:
          type: object
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Ajouter un avis sur une famille
      tags:
      - familles
  /familles/{id}/teachers:
    get:
      consumes:
      - application/json
      description: Récupère la liste des enseignants associés à une famille
      parameters:
      - description: ID de la famille
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
      security:
      - BearerAuth: []
      summary: Liste des enseignants d'une famille
      tags:
      - familles
  /health:
    get:
      consumes:
      - application/json
      description: Vérifie l'état de l'API
      produces:
      - application/json
      responses:
        "200":
          description: API fonctionnelle
          schema:
            additionalProperties: true
            type: object
      summary: Vérification de santé
      tags:
      - health
  /missions:
    get:
      consumes:
      - application/json
      description: Récupère la liste des missions avec possibilité de filtrage par
        statut, enseignant ou famille
      parameters:
      - description: Statut de la mission
        in: query
        name: status
        type: string
      - description: ID de l'enseignant
        in: query
        name: enseignant_id
        type: integer
      - description: ID de la famille
        in: query
        name: famille_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/controllers.MissionResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Liste toutes les missions
      tags:
      - missions
    post:
      consumes:
      - application/json
      description: Crée une nouvelle mission
      parameters:
      - description: Données de la mission
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.MissionCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controllers.MissionResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Création d'une mission
      tags:
      - missions
  /missions/{id}:
    delete:
      consumes:
      - application/json
      description: Supprime une mission existante
      parameters:
      - description: ID de la mission
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Suppression d'une mission
      tags:
      - missions
    get:
      consumes:
      - application/json
      description: Récupère les détails d'une mission spécifique
      parameters:
      - description: ID de la mission
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.MissionResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Détails d'une mission
      tags:
      - missions
    put:
      consumes:
      - application/json
      parameters:
      - description: ID mission
        in: path
        name: id
        required: true
        type: integer
      - description: Champs à mettre à jour
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.MissionUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.MissionResponse'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Mise à jour d'une mission
      tags:
      - missions
  /missions/{id}/courses:
    get:
      consumes:
      - application/json
      description: Récupère la liste des cours associés à une mission
      parameters:
      - description: ID de la mission
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Course'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Liste des cours d'une mission
      tags:
      - missions
  /missions/{id}/payments:
    get:
      consumes:
      - application/json
      description: Récupère la liste des paiements associés à une mission
      parameters:
      - description: ID de la mission
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Payment'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Liste des paiements d'une mission
      tags:
      - missions
  /missions/{id}/reports:
    get:
      consumes:
      - application/json
      description: Récupère la liste des rapports associés à une mission
      parameters:
      - description: ID de la mission
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Report'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Liste des rapports d'une mission
      tags:
      - missions
  /offers:
    get:
      consumes:
      - application/json
      description: Récupère la liste des offres avec possibilité de filtrage par statut,
        sujet et niveau
      parameters:
      - description: Statut de l'offre
        in: query
        name: status
        type: string
      - description: Matière enseignée
        in: query
        name: subject
        type: string
      - description: Niveau d'étude
        in: query
        name: level
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/controllers.OfferResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Liste toutes les offres
      tags:
      - offers
    post:
      consumes:
      - application/json
      description: Crée une nouvelle offre
      parameters:
      - description: Données de l'offre
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.OfferCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controllers.OfferResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Création d'une offre
      tags:
      - offers
  /offers/{id}:
    delete:
      consumes:
      - application/json
      description: Supprime une offre existante
      parameters:
      - description: ID de l'offre
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Suppression d'une offre
      tags:
      - offers
    get:
      consumes:
      - application/json
      description: Récupère les détails d'une offre spécifique
      parameters:
      - description: ID de l'offre
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.OfferResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Détails d'une offre
      tags:
      - offers
    put:
      consumes:
      - application/json
      description: Met à jour les informations d'une offre existante
      parameters:
      - description: ID de l'offre
        in: path
        name: id
        required: true
        type: integer
      - description: Données de mise à jour
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.OfferUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.OfferResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Mise à jour d'une offre
      tags:
      - offers
  /offers/{id}/close:
    put:
      consumes:
      - application/json
      description: Marque une offre comme fermée
      parameters:
      - description: ID de l'offre
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.OfferResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Fermeture d'une offre
      tags:
      - offers
  /offers/{id}/options:
    get:
      consumes:
      - application/json
      description: Récupère toutes les options associées à une offre
      parameters:
      - description: ID de l'offre
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Option'
            type: array
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Liste des options d'une offre
      tags:
      - offers
  /offers/active:
    get:
      consumes:
      - application/json
      description: Récupère la liste des offres avec le statut 'open'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/controllers.OfferResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Liste des offres actives
      tags:
      - offers
  /offers/search:
    get:
      consumes:
      - application/json
      description: Recherche des offres selon différents critères
      parameters:
      - description: Terme de recherche
        in: query
        name: query
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/controllers.OfferResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Recherche d'offres
      tags:
      - offers
  /options:
    get:
      consumes:
      - application/json
      description: Récupère la liste des options avec possibilité de filtrage
      parameters:
      - description: Statut de l'option
        in: query
        name: status
        type: string
      - description: ID de l'enseignant
        in: query
        name: enseignant_id
        type: integer
      - description: ID de la famille
        in: query
        name: famille_id
        type: integer
      - description: ID de l'offre
        in: query
        name: offer_id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Option'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Liste toutes les options
      tags:
      - options
    post:
      consumes:
      - application/json
      description: Crée une nouvelle option sur une offre
      parameters:
      - description: Données de l'option
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.OptionCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/controllers.OptionResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Création d'une option
      tags:
      - options
  /options/{id}:
    delete:
      consumes:
      - application/json
      description: Supprime une option existante
      parameters:
      - description: ID de l'option
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Suppression d'une option
      tags:
      - options
    put:
      consumes:
      - application/json
      description: Met à jour les informations d'une option existante
      parameters:
      - description: ID de l'option
        in: path
        name: id
        required: true
        type: integer
      - description: Données de mise à jour
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.OptionUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.OptionResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Mise à jour d'une option
      tags:
      - options
  /options/{id}/cancel:
    put:
      consumes:
      - application/json
      description: Annule une option acceptée
      parameters:
      - description: ID de l'option
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.OptionResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Annulation d'une option
      tags:
      - options
  /options/{id}/decline:
    put:
      consumes:
      - application/json
      description: Refuse une option en attente
      parameters:
      - description: ID de l'option
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.OptionResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Refus d'une option
      tags:
      - options
  /options/{id}/expire:
    put:
      consumes:
      - application/json
      description: Marque une option comme expirée
      parameters:
      - description: ID de l'option
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.OptionResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Expiration d'une option
      tags:
      - options
  /options/{id}/reject:
    put:
      consumes:
      - application/json
      description: Rejette une option en attente
      parameters:
      - description: ID de l'option
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.OptionResponse'
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Rejet d'une option
      tags:
      - options
  /options/expiring:
    get:
      consumes:
      - application/json
      description: Récupère la liste des options qui vont bientôt expirer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Option'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Liste des options expirant bientôt
      tags:
      - options
  /options/pending:
    get:
      consumes:
      - application/json
      description: Récupère la liste des options avec le statut "en attente"
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Option'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Liste des options en attente
      tags:
      - options
  /profile:
    get:
      consumes:
      - application/json
      description: Obtenir les informations du profil de l'utilisateur connecté
      produces:
      - application/json
      responses:
        "200":
          description: Profil utilisateur
          schema:
            $ref: '#/definitions/models.User'
        "401":
          description: Non authentifié
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Utilisateur non trouvé
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Récupérer le profil utilisateur
      tags:
      - profile
    put:
      consumes:
      - application/json
      description: Modifier les informations du profil de l'utilisateur connecté
      parameters:
      - description: Données de mise à jour
        in: body
        name: request
        required: true
        schema:
          additionalProperties: true
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Profil mis à jour
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Erreur de validation
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Non authentifié
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Mettre à jour le profil utilisateur
      tags:
      - profile
  /users:
    get:
      consumes:
      - application/json
      description: Récupère la liste de tous les utilisateurs (admin seulement)
      produces:
      - application/json
      responses:
        "200":
          description: Liste des utilisateurs
          schema:
            items:
              $ref: '#/definitions/controllers.UserResponse'
            type: array
        "401":
          description: Non authentifié
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Accès refusé
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Liste tous les utilisateurs
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Supprime un utilisateur du système (admin seulement)
      parameters:
      - description: ID de l'utilisateur
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Utilisateur supprimé
          schema:
            additionalProperties: true
            type: object
        "400":
          description: ID invalide
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Non authentifié
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Accès refusé
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Utilisateur non trouvé
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Supprime un utilisateur
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Obtient les détails d'un utilisateur spécifique
      parameters:
      - description: ID de l'utilisateur
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Détails de l'utilisateur
          schema:
            $ref: '#/definitions/controllers.UserResponse'
        "400":
          description: ID invalide
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Non authentifié
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Utilisateur non trouvé
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Récupère un utilisateur par ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Met à jour les informations d'un utilisateur (admin seulement)
      parameters:
      - description: ID de l'utilisateur
        in: path
        name: id
        required: true
        type: integer
      - description: Données de mise à jour
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UserUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Utilisateur mis à jour
          schema:
            $ref: '#/definitions/controllers.UserResponse'
        "400":
          description: Erreur de validation
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Non authentifié
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Accès refusé
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Utilisateur non trouvé
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Met à jour un utilisateur
      tags:
      - users
  /users/{id}/addresses:
    get:
      consumes:
      - application/json
      description: Obtient toutes les adresses associées à un utilisateur
      parameters:
      - description: ID de l'utilisateur
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Liste des adresses
          schema:
            items:
              $ref: '#/definitions/models.Address'
            type: array
        "400":
          description: ID invalide
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Non authentifié
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Utilisateur non trouvé
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Récupère les adresses d'un utilisateur
      tags:
      - users
  /users/{id}/payments:
    get:
      consumes:
      - application/json
      description: Obtient tous les paiements associés à un utilisateur
      parameters:
      - description: ID de l'utilisateur
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Liste des paiements
          schema:
            items:
              $ref: '#/definitions/models.Payment'
            type: array
        "400":
          description: ID invalide
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Non authentifié
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Utilisateur non trouvé
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Récupère les paiements d'un utilisateur
      tags:
      - users
  /users/{id}/resources:
    get:
      consumes:
      - application/json
      description: Obtient toutes les ressources accessibles à un utilisateur
      parameters:
      - description: ID de l'utilisateur
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Liste des ressources
          schema:
            items:
              $ref: '#/definitions/models.Resource'
            type: array
        "400":
          description: ID invalide
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Non authentifié
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Utilisateur non trouvé
          schema:
            additionalProperties: true
            type: object
      security:
      - BearerAuth: []
      summary: Récupère les ressources d'un utilisateur
      tags:
      - users
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
